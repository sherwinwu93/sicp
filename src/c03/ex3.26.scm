(load-r "lib/compare.scm")
(define (make-tree key value left-branch right-branch)
  (list key value left-branch right-branch))
(define (tree-key tree)
  (car tree))
(define (tree-value tree)
  (cadr tree))
(define (tree-left-branch tree)
  (caddr tree))
(define (tree-right-branch tree)
  (cadddr tree))
(define (tree-set-key! tree new-key)
  (set-car! tree new-key))
(define (tree-set-value! tree new-value)
  (set-car! (cdr tree) new-value))
(define (tree-set-left-branch! tree new-left-branch)
  (set-car! (cddr tree) new-left-branch))
(define (tree-set-right-branch! tree new-right-branch)
  (set-car! (cdddr tree) new-right-branch))
(define (tree-empty? tree)
  (null? tree))

(define (tree-search tree given-key compare)
  (if (tree-empty? tree)
      false
      (let ((compare-result (compare given-key (tree-key tree))))
	(cond ((= compare-result 0) tree)
	      ((= compare-result -1) (tree-search (tree-left-branch tree) given-key compare))
	      ((= compare-result 1) (tree-search (tree-right-branch tree) given-key compare))))))
(define (tree-insert! tree given-key value compare)
  (if (tree-empty? tree)
      (make-tree given-key value () ())
      (let ((compare-result (compare given-key (tree-key tree))))
	(cond ((= compare-result 0) (tree-set-value! tree value) tree)
	      ((= compare-result -1)
	       (tree-set-left-branch! tree
				      (tree-insert! (tree-left-branch tree) given-key value compare))
	       tree)
	      ((= compare-result 1)
	       (tree-set-right-branch! tree
				       (tree-insert! (tree-right-branch tree) given-key value compare))
	       tree)))))

(define (make-table compare)
  (let ((t ()))
    (define (lookup given-key)
      (tree-value (tree-search t given-key compare)))
    (define (insert! given-key value)
      (set! t (tree-insert! t given-key value compare))
      t)
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
	    ((eq? m 'insert!) insert!)
	    (else
	     (error "Unknown operation " m))))
    dispatch))

(define t1 (make-table compare-number))

(compare-number 1 2)

((t1 'insert!) 1 11)
((t1 'insert!) 2 23)
t1
