(define (make-node item)
  (let ((left-node ())
	(right-node ()))
    (define (set-left-node! new-node) (set! left-node new-node))
    (define (set-right-node! new-node) (set! right-node new-node))
    (define (dispatch m)
      (cond ((eq? m 'left-node) left-node)
	    ((eq? m 'right-node) right-node)
	    ((eq? m 'item) item)
	    ((eq? m 'set-left-node!) set-left-node!)
	    ((eq? m 'set-right-node!) set-right-node!)
	    (else (error "undefined operations"))))
    dispatch))
(define (link-x-y-node! x-node y-node)
  ((x-node 'set-right-node!) y-node)
  ((y-node 'set-left-node!) x-node))
(define (unlink-x-y-node! x-node y-node)
  ((x-node 'set-right-node!) ())
  ((y-node 'set-left-node!) ()))
(define (print-node node)
  (let ((right-node (node 'right-node))
	(item (node 'item)))
    (cond ((null? right-node)
	   (display item)
	   (newline))
	  (else
	   (display item)
	   (newline)
	   (print-node right-node)))))
(define n1 (make-node 'a))
(define n2 (make-node 'b))
(link-x-y-node! n1 n2)
(print-node n1)
(print-node n2)

;; 构造 make-deque
(define (make-deque)
  (cons () ()))
;; 选择 front-deque`rear-deque
(define (front-deque deque)
  (car deque))
(define (rear-deque deque)
  (cdr deque))
;; 改变 set-front-ptr!`set-rear-ptr!
(define (set-front-prt! deque item)
  (set-car! deque item))
(define (set-rear-prt! deque item)
  (set-cdr! deque item))
;; 谓词 empty-deque?
(define (empty-deque? deque)
  (null? (front-deque deque)))
;; 改变 front-insert-deque!`rear-insert-deque!`front-delete-deque!`rear-delete-deque!
(define (front-insert-deque! deque item)
  (let ((new-node (make-node item)))
    (cond ((empty-deque? deque)
	   (set-front-prt! deque new-node)
	   (set-rear-prt! deque new-node))
	  (else
	   (let ((old-front-node (front-deque deque)))
	     (link-x-y-node! new-node old-front-node)
	     (set-front-prt! deque new-node))))))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
	 (error "null deque"))
	(else
	 (let ((old-front-node (front-deque deque)))
	   (let ((next-node (old-front-node 'right-node)))
	     (set-front-prt! deque next-node)
	     (unlink-x-y-node! old-front-node next-node))))))
(define (rear-insert-deque! deque item)
  (let ((new-node (make-node item)))
    (cond ((empty-deque? deque)
	   (set-front-prt! deque new-node)
	   (set-rear-prt! deque new-node))
	  (else
	   (let ((old-rear-node (rear-deque deque)))
	     (link-x-y-node! old-rear-node new-node)
	     (set-rear-prt! deque new-node))))))
(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
	 (error "null deque"))
	(else
	 (let ((old-rear-node (rear-deque deque)))
	   (let ((previous-node (old-rear-node 'left-node)))
	     (set-rear-prt! deque previous-node)
	     (unlink-x-y-node! previous-node old-rear-node))))))
(define (print-deque deque)
  (cond ((empty-deque? deque)
	 ())
	(else
	 (let ((front-node (front-deque deque)))
	   (print-node front-node)))))
(define d1 (make-deque))
(print-deque d1)
(front-insert-deque! d1 'c)
(front-insert-deque! d1 'b)
(front-insert-deque! d1 'a)
(front-delete-deque! d1)
(rear-insert-deque! d1 'd)
(rear-insert-deque! d1 'e)
(rear-delete-deque! d1)
