;; 队列的数据抽象
;; (make-queue)
;; (empty-queue? q)
;; (front-queue q)

;; (insert-queue! q iterm)
;; (delete-queue! queue)

;; front-ptr rear-ptr queue item
;; (front-ptr queue)
;; (rear-ptr quece)
;; (set-front-ptr! queue item)
;; (set-rear-ptr! queue item)
(define (front-ptr queue)
  (car queue))
(define (rear-ptr queue)
  (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))
(define (make-queue)
  (cons () ()))
(define (empty-queue? queue)
  (null? (front-ptr queue)))
(define (front-queue queue)
  (front-ptr queue))
(define (insert-queue! queue item)
  (let ((new-pair (cons item ())))
    (if (empty-queue? queue)
	(begin (set-front-ptr! queue new-pair)
	       (set-rear-ptr! queue new-pair)
	       queue)
	(begin (set-cdr! (rear-ptr queue) new-pair)
	       (set-rear-ptr! queue new-pair)
	       queue))))
(define (delete-queue! queue)
  (if (empty-queue? queue)
      (error "no queue")
      (begin (set-front-ptr! queue (cdr (front-ptr queue)))
	     queue)))

(define q (make-queue))
(insert-queue! q 'a)
(insert-queue! q 'b)
(delete-queue! q)
(insert-queue! q 'c)
(insert-queue! q 'd)
(delete-queue! q)
(front-queue q)
