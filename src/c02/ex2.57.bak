(load-r "c02/p99.scm")
;; 扩充求导程序,使得处理任意项
(deriv '(* x y (+ x 3)) 'x)
;; 只修改和的积的表示,不修改deriv
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        (else
         (error "unknown expression type -- DERIV" exp))))
(deriv '(+ x c d x) 'x)
(deriv '(* x c) 'x)
;; 构造和式make-sum,addend,augend
(define (make-sum . list)
  (define (recur temp)
    (display temp)
    (display (null? (cdr (cdr temp))))
    (display (car temp))
    (display (cadr temp))
    (display (list '+ (car temp) (cadr temp)))
    (if (null? (cdr (cdr temp)))
        (list '+ (car temp) (cadr temp))
        (list '+ (car temp) (recur (cdr temp)))))
  (recur list))
(define (addend s) (cadr s))
(define (augend s)
      (caddr s))
(make-sum 2 3)


;;
(define (make-product x . z)
  (if (and (pair? x) (number? (car x)))
      (append (cons '* x)
              z)
      (append (list '* x)
              z)))
(define (multiplier p)
  (cadr p))
(define (multiplicand p)
  (if (= (length p) 3)
      (caddr p)
      (make-product (cdr (cdr p)))))
(define p1 (make-product '(+ 4 5) 2 3))
(multiplier p1)
(multiplicand p1)
