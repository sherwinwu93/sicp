(load-r "c02/p99.scm")
;; 扩充求导程序,使得处理任意项
(deriv '(* x y (+ x 3)) 'x)
;; 只修改和的积的表示,不修改deriv
(define (deriv exp var)
  (display exp)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        (else
         (error "unknown expression type -- DERIV" exp))))
(deriv '(+ x c d x) 'x)
(deriv '(* x c x) 'x)
;; 构造和式make-sum,addend,augend
(define (make-sum . lst)
  (define (recur temp)
    (let ((item (car temp))
          (next (cdr temp)))
      (if (null? (cdr next))
          (list '+ item (car next))
          (list '+ item (recur next)))))
  (recur lst))
(define (addend s) (cadr s))
(define (augend s)
  (if (= (length s) 3)
      (caddr s)
      (cons '+ (cdr (cdr s)))))
(augend '(+ 1 2 3 4))


;;
(define (make-product . z)
  (define (iter temp)
    (let ((item (car temp))
          (next (cdr temp)))
      (if (null? (cdr next))
          (list '* item (car next))
          (list '* item (iter next)))))
  (iter z))
(define (multiplier p)
  (cadr p))
(define (multiplicand p)
  (if (= (length p) 3)
      (caddr p)
      (cons '* (cdr (cdr p)))))
(define p1 (make-product '(+ 4 5) 2 3))
(multiplier p1)
(multiplicand p1)
