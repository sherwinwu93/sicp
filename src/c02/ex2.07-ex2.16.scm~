;;区间加法
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
		 (+ (upper-bound x) (upper-bound y))))
;;区间乘法
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x ) (lower-bound y)))
	(p2 (* (lower-bound x ) (upper-bound y)))
	(p3 (* (upper-bound x ) (lower-bound y)))
	(p4 (* (upper-bound x ) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
		   (max p1 p2 p3 p4))))
;;区间除法
(define (div-interval x y)
  (mul-interval x
		(make-interval (/ 1.0 (upper-bound y))
			       (/ 1.0 (lower-bound y)))))
;;区间构造
(define (make-interval a b) (cons a b))
;;ex2.7 上下区间
(define (upper-bound x)
  (let ((a (car x))
	(b (cdr x)))
    (if (> a b)
	a
	b)))
(define (lower-bound x)
  (let ((a (car x))
	(b (cdr x)))
    (if (> a b)
	b
	a)))
;;ex2.7 test
(lower-bound (make-interval 2 5))
(upper-bound (make-interval 2 5))
;;ex2.8 加法->减法
(define (subtract-interval x y)
  (
