(load-r "c02/p129-generic-operator.scm")
;; 安装常规数包到通用
(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'make 'scheme-number
       (lambda (x) (tag x)))
  )
(install-scheme-number-package)
(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))
(add (make-scheme-number 1) (make-scheme-number 2))

;; 安装有理数到通用
(define (install-rational-package)
  ;; internal procedures
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  ;; interface to rest of the system
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  (put 'numer '(rational) numer)
  'Done)
(install-rational-package)
(define (make-rational n d)
  ((get 'make 'rational) n d))
(add (make-rational 2 3) (make-rational 1 2))

(load-r "c02/p118-complex.scm")
;; 安装复数到通用
(define (install-complex-package)
  ;; imported procedures from rectangular and polar packages
  ;; 复数构造函数来自于complex包
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  ;; internal procedures
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                         (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                         (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                       (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                       (- (angle z1) (angle z2))))
  ;; interface to rest of the system
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
       (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
       (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
       (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
       (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'make-from-real-imag 'complex
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
       (lambda (r a) (tag (make-from-mag-ang r a))))
  )
(install-complex-package)
(define (make-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))
(define (make-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))
(add (make-from-real-imag 1 2) (make-from-real-imag 3 4))
(mul (make-from-mag-ang 1 2) (make-from-mag-ang 3 4))
;; 直角形式3+4i
(make-from-real-imag 3 4)
;; =zero?安装到通用算术包里,能处理常规的数`有理数和复数
(define (install-=zero?-package)
  ;; interface to rest of the system
  (put '=zero? '(scheme-number)
       (lambda (x)
         (display x)
         (= x 0)))
  (put '=zero? '(rational)
       (lambda (x)
         (= ((get 'numer '(rational)) x) 0)))
  (put '=zero? '(complex)
       (lambda (x)
         (and (= ((get 'real-part '(complex)) x) 0)
              (= ((get 'imag-part '(complex)) x) 0))))
  )
(install-=zero?-package)
(define =zero?
  (lambda (x) (apply-generic '=zero? x)))
(=zero? (make-scheme-number 0))
(=zero? (make-rational 0 1))
(=zero? (make-from-real-imag 0 1))
